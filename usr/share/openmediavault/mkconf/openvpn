#!/bin/sh
#
# Copyright (c) 2015 OpenMediaVault Plugin Developers
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

SERVICE_XPATH=/config/services/openvpn
SERVICE_SYSCTL_CONF=/etc/sysctl.d/99-openvpn.conf
SERVICE_IPTABLES_CONF=/etc/network/if-pre-up.d/openvpn
SERVICE_OPENVPN_CONF=/etc/openvpn/server.conf
SERVICE_OPENVPN_KEY_DIR="${SERVICE_OPENVPN_KEY_DIR:-/etc/openvpn/keys}"

get_interface(){
     # Define the interface to use
     interface="$(omv_config_get "${SERVICE_XPATH}/interface")"
	 echo ${interface}
}

get_ip(){
     # Determine the IP address of the network adapter
	 interface=$(get_interface)
	 ip=$(ifconfig "${interface}" | grep 'inet addr:' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d: -f2 | awk '{ print $1}' | head -1)
	 echo ${ip}
}

get_mask(){
     # Determine the netmask of the network adapter
	 interface=$(get_interface)
	 mask=$(ifconfig "${interface}" | grep 'inet addr:' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d: -f4 | awk '{ print $1}' | head -1)
	 echo ${mask}
}

get_subnet(){
     # Determine the subnet of the network adapter
     ip=$(get_ip)
	 mask=$(get_mask)
	 local IFS='.' subnet i
	 local -a oct msk
	 read -ra oct <<< "${ip}"
	 read -ra msk <<< "${mask}"
	 for i in ${!oct[@]}; do
	     subnet+=( "$(( oct[i] & msk[i] ))" )
		 done
	echo "${subnet[*]}"
}

set_easyrsa(){
    # Check if the easy-rsa directory exists
	# If it doesn't exist then copy it to /etc/openvpn/easy-rsa/3.0/
	# This version uses easy-rsa 3.0.1
	# With newer releases of OpenVPN in Debian easy-rsa isn't
	# bundled, download it directly from Github instead.
    if [ ! -d /etc/openvpn/easy-rsa/3.0/ ]; then
         wget --no-check-certificate -O ~/easy-rsa.tar.gz https://github.com/OpenVPN/easy-rsa/releases/download/3.0.1/EasyRSA-3.0.1.tgz
	     tar xzf ~/easy-rsa.tar.gz -C ~/
         mkdir -p /etc/openvpn/easy-rsa/3.0/
		 cp ~/EasyRSA-3.0.1/* /etc/openvpn/easy-rsa/3.0/
		 rm -rf ~/EasyRSA-3.0.1
		 rm -rf ~/easy-rsa.tar.gz		 
    fi
}

set_ca(){
    # Run set_easyrsa
	set_easyrsa
    # Change directory
	cd /etc/openvpn/easy-rsa/3.0/
	# Initalize the PKI directory. If command is called again, the directory is emptied and a new PKI is set
	./easy-rsa --batch --pki-dir="${SERVICE_OPENVPN_KEY_DIR}" init-pki
	# Remove clients from the config.
	omv_config_update "${SERVICE_XPATH}/clients" ""

	# Get settings for CA
	ca_country="$(omv_config_get "${SERVICE_XPATH}/ca_country")"
	ca_province="$(omv_config_get "${SERVICE_XPATH}/ca_province")"
	ca_city="$(omv_config_get "${SERVICE_XPATH}/ca_city")"
	ca_org="$(omv_config_get "${SERVICE_XPATH}/ca_org")"
	ca_email="$(omv_config_get "${SERVICE_XPATH}/ca_email")"
	ca_cn="$(omv_config_get "${SERVICE_XPATH}/ca_common_name")"
	# ca_name="$(omv_config_get "${SERVICE_XPATH}/ca_name")"
	# ca_ou="$(omv_config_get "${SERVICE_XPATH}/ca_org")"
	
	# Populate the CA certificate
	./easyrsa --batch --pki-dir="${SERVICE_OPENVPN_KEY_DIR}" --dn-mode=org --req-cn="${ca_cn}" --req-c="${ca_country}" --req-st="${ca_province}" \
	--req-city="${ca_city}" --req-org="${ca_org}" --req-email="${ca_email}" --req-ou="${ca_org}" build-ca nopass
	# Generate the CRL
    ./easyrsa --batch --pki-dir="${SERVICE_OPENVPN_KEY_DIR}" gen-crl
	# Generate DH
	./easyrsa --batch --pki-dir="${SERVICE_OPENVPN_KEY_DIR}" gen-dh
}

set_server(){
    # Change directory
	cd /etc/openvpn/easy-rsa/3.0/
	
	# Get settings for server
	server_country="$(omv_config_get "${SERVICE_XPATH}/server_country")"
	server_province="$(omv_config_get "${SERVICE_XPATH}/server_province")"
	server_city="$(omv_config_get "${SERVICE_XPATH}/server_city")"
	server_org="$(omv_config_get "${SERVICE_XPATH}/server_org")"
	server_email="$(omv_config_get "${SERVICE_XPATH}/server_email")"
	server_cn="$(omv_config_get "${SERVICE_XPATH}/server_common_name")"
	
	#Populate the server certifticate
    ./easyrsa --batch --pki-dir="${SERVICE_OPENVPN_KEY_DIR}" --dn-mode=org --req-cn="${server_cn}" --req-c="${server_country}" --req-st="${server_province}" \
	--req-city="${server_city}" --req-org="${server_org}" --req-email="${server_email}" --req-ou="${server_org}" build-server_full server nopass
}

set_config(){
    # Define variables
	interface=$(get_interface)
    ip=$(get_ip)
    mask=$(get_mask)
    subnet=$(get_subnet)
    port=$(omv_config_get "${SERVICE_XPATH}/port")
    protocol=$(omv_config_get "${SERVICE_XPATH}/protocol")
    compression=$(omv_config_get "${SERVICE_XPATH}/compression")
    pam_authentication=$(omv_config_get "${SERVICE_XPATH}/pam_authentication")
    extra_options=$(omv_config_get "${SERVICE_XPATH}/extra_options")
    loglevel=$(omv_config_get "${SERVICE_XPATH}/loglevel")
	vpn_network=$(omv_config_get "${SERVICE_XPATH}/vpn_network")
    vpn_mask=$(omv_config_get "${SERVICE_XPATH}/vpn_mask")
    default_gateway=$(omv_config_get "${SERVICE_XPATH}/default_gateway")
    client_to_client=$(omv_config_get "${SERVICE_XPATH}/client_to_client")
    # Split strings into rows with the regex "\s*,\s*".
    dns=$(omv_config_get "${SERVICE_XPATH}/dns" | sed -e 's/\s*,\s*/\n/g')
    dns_domains=$(omv_config_get "${SERVICE_XPATH}/dns_domains" | sed -e 's/\s*,\s*/\n/g')
    wins=$(omv_config_get "${SERVICE_XPATH}/wins" | sed -e 's/\s*,\s*/\n/g')

    if [ ${compression} -eq 1 ]; then
        compression="comp-lzo"
    else
        compression=";comp-lzo"
    fi

    if [ ${pam_authentication} -eq 1 ]; then
        pam_authentication="plugin /usr/lib/openvpn/openvpn-auth-pam.so login"
    else
        pam_authentication=";plugin /usr/lib/openvpn/openvpn-auth-pam.so login"
    fi

    if [ ${default_gateway} -eq 1 ]; then
        default_gateway="push \"redirect-gateway def1 bypass-dhcp\""
        static_route=";push \"route ${subnet} ${mask}\""
    else
        default_gateway=";push \"redirect-gateway def1 bypass-dhcp\""
        static_route="push \"route ${subnet} ${mask}\""
    fi

    if [ ${client_to_client} -eq 1 ]; then
        client_to_client="client-to-client"
    else
        client_to_client=";client-to-client"
    fi

    # Enable net.ipv4.ip_forward.
    echo "net.ipv4.ip_forward=1" > ${SERVICE_SYSCTL_CONF}
	    echo 1 > /proc/sys/net/ipv4/ip_forward

    # Remove old iptables rule.
    if [ -f ${SERVICE_IPTABLES_CONF} ]; then
        iptables -t nat -D $(tail -1 ${SERVICE_IPTABLES_CONF} | cut -c20-) || true
    fi

    # Set iptables.
    iptables -t nat -A POSTROUTING -s ${vpn_network}/24 -j SNAT --to ${ip}
    echo "#!/bin/sh" > ${SERVICE_IPTABLES_CONF}
    echo "[ \"\$IFACE\" != \"lo\" ] || exit 0" >> ${SERVICE_IPTABLES_CONF}
    echo "iptables -t nat -A POSTROUTING -s ${vpn_network}/24 -j SNAT --to ${ip}" >> ${SERVICE_IPTABLES_CONF}
    chmod 755 ${SERVICE_IPTABLES_CONF}
	
	# Create the OpenVPN server configuration file
	cat > ${SERVICE_OPENVPN_CONF} <<EOF
local ${ip}
port ${port}
proto ${protocol}
dev tun
ca ${SERVICE_OPENVPN_KEY_DIR}/ca.crt
cert ${SERVICE_OPENVPN_KEY_DIR}/issued/server.crt
key ${SERVICE_OPENVPN_KEY_DIR}/private/server.key
dh ${SERVICE_OPENVPN_KEY_DIR}/dh.pem
server ${vpn_network} ${vpn_mask}
ifconfig-pool-persist ipp.txt
${static_route}
${default_gateway}
EOF
    for address in ${dns}; do
        echo "push \"dhcp-option DNS ${address}\"" >> ${SERVICE_OPENVPN_CONF}
    done
    for address in ${dns_domains}; do
        echo "push \"dhcp-option DOMAIN ${address}\"" >> ${SERVICE_OPENVPN_CONF}
    done
    for address in ${wins}; do
        echo "push \"dhcp-option WINS ${address}\"" >> ${SERVICE_OPENVPN_CONF}
    done

    cat >> ${SERVICE_OPENVPN_CONF} <<EOF
${client_to_client}
keepalive 10 120
${compression}
${pam_authentication}
user nobody
group nogroup
persist-key
persist-tun
status openvpn-status.log
log /var/log/openvpn.log
verb ${loglevel}
mute 10
crl-verify ${SERVICE_OPENVPN_KEY_DIR}/crl.pem

EOF
    xmlstarlet sel -t -m "${SERVICE_XPATH}" \
        -o "# Extra options" -n \
        -v "extra_options" -n \
        ${OMV_CONFIG_FILE} | xmlstarlet unesc >> ${SERVICE_OPENVPN_CONF}

}

set_client(){
    # Change directory
	cd /etc/openvpn/easy-rsa/3.0/
    # Define variables
    uuid=$1
    common_name="$(omv_config_get "${SERVICE_XPATH}/clients/client[uuid='${uuid}']/common_name")"
	country="$(omv_config_get "${SERVICE_XPATH}/clients/client[uuid='${uuid}']/country")"
	province="$(omv_config_get "${SERVICE_XPATH}/clients/client[uuid='${uuid}']/province")"
	city="$(omv_config_get "${SERVICE_XPATH}/clients/client[uuid='${uuid}']/city")"
	org="$(omv_config_get "${SERVICE_XPATH}/clients/client[uuid='${uuid}']/org")"
	email="$(omv_config_get "${SERVICE_XPATH}/clients/client[uuid='${uuid}']/email")"

    # Populate the client certificate
    ./easyrsa --batch --pki-dir="${SERVICE_OPENVPN_KEY_DIR}" --dn-mode=org --req-cn="${common_name}" --req-c="${country}" --req-st="${province}" \
	--req-city="${city}" --req-org="${org}" --req-email="${email}" --req-ou="${org}" build-client-full ${uuid} nopass
}

revoke_client(){
    # Change directory
	cd /etc/openvpn/easy-rsa/3.0/
	# Define variables
	uuid=$1
	# Revoke the client
	./easyrsa --batch --pki-dir="${SERVICE_OPENVPN_KEY_DIR}" revoke ${uuid}
}

revoke_all(){
    # Change directory
	cd /etc/openvpn/easy-rsa/3.0/
	# Don't cross the streams. It could be bad!
	./easyrsa --batch --pki-dir="${SERVICE_OPENVPN_KEY_DIR}" init-pki
	# Tell him about the twinkie. What about the twinkie?
	omv_config_update "${SERVICE_XPATH}/clients" ""
}

restart_openvpn(){
    service openvpn restart
}

reload_openvpn(){
    service openvpn reload
}

# Generate configuration files
if [ "${1}" = "mkconf" ]; then
    args=(${2})
else
    args=(${*})
fi

case ${args[0]} in 
    setup_ca)
	 set_ca
    ;;
	
	setup_server)
	 set_server	 
	;;
	
	setup_config)
	 set_config
	;;
	
	setup_client)
	 test -n "${args[1]}" && set_client ${args[1]}
	;;

	revoke_client)
	 test -n "${args[1]}" && revoke_client ${args[1]}
	;;
	
	revoke_all)
	 revoke_all
	;;

	restart)
	 restart_openvpn
	;;
	
	reload)
	 reload_openvpn
	;;
esac
	
exit 0
