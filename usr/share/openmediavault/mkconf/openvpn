#!/bin/bash
#
# Copyright (C) 2014 OpenMediaVault Plugin Developers
#
# This file is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this file. If not, see <http://www.gnu.org/licenses/>.

# This script is mostly based on:
# https://github.com/Nyr/openvpn-install/blob/master/openvpn-install.sh

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

SERVICE_XPATH=/config/services/openvpn
SERVICE_SYSCTL_CONF=/etc/sysctl.d/99-openvpn.conf
SERVICE_IPTABLES_CONF=/etc/network/if-pre-up.d/openvpn
SERVICE_OPENVPN_CONF=/etc/openvpn/server.conf
SERVICE_OPENVPN_KEY_DIR="${SERVICE_OPENVPN_KEY_DIR:-/etc/openvpn/keys}"

# Functions
get_ip()
{
    ip=$(ifconfig | grep 'inet addr:' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d: -f2 | awk '{ print $1}' | head -1)

    if [ "${ip}" = "" ]; then
        ip=$(wget -qO- ipv4.icanhazip.com)
    fi

    echo ${ip}
}

get_mask()
{
    mask=$(ifconfig | grep 'inet addr:' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | cut -d: -f4 | awk '{ print $1}' | head -1)

    echo ${mask}
}

get_subnet()
{
    ip=$(get_ip)
    mask=$(get_mask)
    local IFS='.' subnet i
    local -a oct msk
    read -ra oct <<< "${ip}"
    read -ra msk <<< "${mask}"

    for i in ${!oct[@]}; do
        subnet+=( "$(( oct[i] & msk[i] ))" )
    done

    echo "${subnet[*]}"
}

setup_easy_rsa()
{
    if [ ! -d /etc/openvpn/easy-rsa/2.0/ ]; then
        # Get easy-rsa from the examples directory
        cp -R /usr/share/doc/openvpn/examples/easy-rsa/ /etc/openvpn

        # With never releases of OpenVPN in Debian easy-rsa isn't
        # bundled, download it directly from Github instead.
        if [ ! -d /etc/openvpn/easy-rsa/2.0/ ]; then
            wget --no-check-certificate -O ~/easy-rsa.tar.gz https://github.com/OpenVPN/easy-rsa/archive/2.2.2.tar.gz
            tar xzf ~/easy-rsa.tar.gz -C ~/
            mkdir -p /etc/openvpn/easy-rsa/2.0/
            cp ~/easy-rsa-2.2.2/easy-rsa/2.0/* /etc/openvpn/easy-rsa/2.0/
            rm -rf ~/easy-rsa-2.2.2
            rm -rf ~/easy-rsa.tar.gz
        fi
    fi
}

setup_certificates()
{
    setup_easy_rsa

    # Create the key directory if it doesn't exist.
    # Otherwise no keys will be generated.
    if [ ! -d ${SERVICE_OPENVPN_KEY_DIR} ]; then
        mkdir -p ${SERVICE_OPENVPN_KEY_DIR}
    fi

    touch ${SERVICE_OPENVPN_KEY_DIR}/index.txt
    touch ${SERVICE_OPENVPN_KEY_DIR}/serial
    echo "01" > ${SERVICE_OPENVPN_KEY_DIR}/serial

    # Change directory
    cd /etc/openvpn/easy-rsa/2.0/

    # Increase key size to 2048
    cp -u -p openssl-1.0.0.cnf openssl.cnf
    sed -i 's|export KEY_SIZE=1024|export KEY_SIZE=2048|' /etc/openvpn/easy-rsa/2.0/vars

    # Create the PKI
    . /etc/openvpn/easy-rsa/2.0/vars
    . /etc/openvpn/easy-rsa/2.0/clean-all

    # Remove clients from the config
    omv_config_update "${SERVICE_XPATH}/clients" ""

    # The following lines are from build-ca. We don't use that script directly
    # because it's interactive. This could potentially break the installation
    # script in case of future changes.

    # Certificate Authority
    export KEY_DIR="${SERVICE_OPENVPN_KEY_DIR}"
    export EASY_RSA="${EASY_RSA:-.}"
    "$EASY_RSA/pkitool" --initca

    # Initialize CRL by revoking a non-existant cert
    . /etc/openvpn/easy-rsa/2.0/revoke-full NULL || echo "CRL created"

    # Generate Diffie Hellman parameter
    . /etc/openvpn/easy-rsa/2.0/build-dh

    # Same as the last time, we are going to run build-key-server
    # Server Certificate
    export KEY_DIR="${SERVICE_OPENVPN_KEY_DIR}"
    export EASY_RSA="${EASY_RSA:-.}"
    "$EASY_RSA/pkitool" --server server
}

setup_config()
{
    # Variables
    ip=$(get_ip)
    mask=$(get_mask)
    subnet=$(get_subnet)
    port=$(omv_config_get "${SERVICE_XPATH}/port")
    protocol=$(omv_config_get "${SERVICE_XPATH}/protocol")
    compression=$(omv_config_get "${SERVICE_XPATH}/compression")
    pam_authentication=$(omv_config_get "${SERVICE_XPATH}/pam_authentication")
    extra_options=$(omv_config_get "${SERVICE_XPATH}/extra_options")
    loglevel=$(omv_config_get "${SERVICE_XPATH}/loglevel")

    vpn_network=$(omv_config_get "${SERVICE_XPATH}/vpn_network")
    vpn_mask=$(omv_config_get "${SERVICE_XPATH}/vpn_mask")
    default_gateway=$(omv_config_get "${SERVICE_XPATH}/default_gateway")
    client_to_client=$(omv_config_get "${SERVICE_XPATH}/client_to_client")

    # Split strings into rows with the regex "\s*,\s*"
    dns=$(omv_config_get "${SERVICE_XPATH}/dns" | sed -e 's/\s*,\s*/\n/g')
    dns_domains=$(omv_config_get "${SERVICE_XPATH}/dns_domains" | sed -e 's/\s*,\s*/\n/g')
    wins=$(omv_config_get "${SERVICE_XPATH}/wins" | sed -e 's/\s*,\s*/\n/g')

    if [ ${compression} -eq 1 ]; then
        compression="comp-lzo"
    else
        compression=";comp-lzo"
    fi

    if [ ${pam_authentication} -eq 1 ]; then
        pam_authentication="plugin /usr/lib/openvpn/openvpn-auth-pam.so login"
    else
        pam_authentication=";plugin /usr/lib/openvpn/openvpn-auth-pam.so login"
    fi

    if [ ${default_gateway} -eq 1 ]; then
        default_gateway="push \"redirect-gateway def1 bypass-dhcp\""
        static_route=";push \"route ${subnet} ${mask}\""
    else
        default_gateway=";push \"redirect-gateway def1 bypass-dhcp\""
        static_route="push \"route ${subnet} ${mask}\""
    fi

    if [ ${client_to_client} -eq 1 ]; then
        client_to_client="client-to-client"
    else
        client_to_client=";client-to-client"
    fi

    # Enable net.ipv4.ip_forward
    echo "net.ipv4.ip_forward=1" > ${SERVICE_SYSCTL_CONF}
    echo 1 > /proc/sys/net/ipv4/ip_forward

    # Set iptables
    iptables -t nat -D $(tail -1 ${SERVICE_IPTABLES_CONF} | cut -c20-)
    iptables -t nat -A POSTROUTING -s ${vpn_network}/24 -j SNAT --to ${ip}
    echo "#!/bin/sh" > ${SERVICE_IPTABLES_CONF}
    echo "[ \"\$IFACE\" != \"lo\" ] || exit 0" >> ${SERVICE_IPTABLES_CONF}
    echo "iptables -t nat -A POSTROUTING -s ${vpn_network}/24 -j SNAT --to ${ip}" >> ${SERVICE_IPTABLES_CONF}
    chmod 755 ${SERVICE_IPTABLES_CONF}

    cat > ${SERVICE_OPENVPN_CONF} <<EOF
#################################################
# OpenMediaVault config file for multi-client   #
# server.                                       #
#                                               #
# This file is for the server side              #
# of a many-clients <-> one-server              #
# OpenVPN configuration.                        #
#                                               #
# Comments are preceded with '#' or ';'         #
#################################################

# Which TCP/UDP port should OpenVPN listen on?
# If you want to run multiple OpenVPN instances
# on the same machine, use a different port
# number for each one.  You will need to
# open up this port on your firewall.
port ${port}

# TCP or UDP server?
proto ${protocol}

# "dev tun" will create a routed IP tunnel,
# "dev tap" will create an ethernet tunnel.
# Use "dev tap0" if you are ethernet bridging
# and have precreated a tap0 virtual interface
# and bridged it with your ethernet interface.
# If you want to control access policies
# over the VPN, you must create firewall
# rules for the the TUN/TAP interface.
# On non-Windows systems, you can give
# an explicit unit number, such as tun0.
# On Windows, use "dev-node" for this.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
dev tun

# SSL/TLS root certificate (ca), certificate
# (cert), and private key (key).  Each client
# and the server must have their own cert and
# key file.  The server and all clients will
# use the same ca file.
#
# See the "easy-rsa" directory for a series
# of scripts for generating RSA certificates
# and private keys.  Remember to use
# a unique Common Name for the server
# and each of the client certificates.
#
# Any X509 key management system can be used.
# OpenVPN can also use a PKCS #12 formatted key file
# (see "pkcs12" directive in man page).
ca ${SERVICE_OPENVPN_KEY_DIR}/ca.crt
cert ${SERVICE_OPENVPN_KEY_DIR}/server.crt
key ${SERVICE_OPENVPN_KEY_DIR}/server.key # This file should be kept secret

# Diffie hellman parameters.
# Generate your own with:
#   openssl dhparam -out dh1024.pem 1024
# Substitute 2048 for 1024 if you are using
# 2048 bit keys.
dh ${SERVICE_OPENVPN_KEY_DIR}/dh2048.pem

# Configure server mode and supply a VPN subnet
# for OpenVPN to draw client addresses from.
# The server will take 10.8.0.1 for itself,
# the rest will be made available to clients.
# Each client will be able to reach the server
# on 10.8.0.1. Comment this line out if you are
# ethernet bridging. See the man page for more info.
server ${vpn_network} ${vpn_mask}

# Maintain a record of client <-> virtual IP address
# associations in this file.  If OpenVPN goes down or
# is restarted, reconnecting clients can be assigned
# the same virtual IP address from the pool that was
# previously assigned.
ifconfig-pool-persist ipp.txt

# Push routes to the client to allow it
# to reach other private subnets behind
# the server.  Remember that these
# private subnets will also need
# to know to route the OpenVPN client
# address pool (10.8.0.0/255.255.255.0)
# back to the OpenVPN server.
${static_route}

# If enabled, this directive will configure
# all clients to redirect their default
# network gateway through the VPN, causing
# all IP traffic such as web browsing and
# and DNS lookups to go through the VPN
# (The OpenVPN server machine may need to NAT
# or bridge the TUN/TAP interface to the internet
# in order for this to work properly).
${default_gateway}

# Certain Windows-specific network settings
# can be pushed to clients, such as DNS
# or WINS server addresses.  CAVEAT:
# http://openvpn.net/faq.html#dhcpcaveats
# The addresses below refer to the public
# DNS servers provided by opendns.com.
EOF

    for address in ${dns}; do
        echo "push \"dhcp-option DNS ${address}\"" >> ${SERVICE_OPENVPN_CONF}
    done
    for address in ${dns_domains}; do
        echo "push \"dhcp-option DOMAIN ${address}\"" >> ${SERVICE_OPENVPN_CONF}
    done
    for address in ${wins}; do
        echo "push \"dhcp-option WINS ${address}\"" >> ${SERVICE_OPENVPN_CONF}
    done

    cat >> ${SERVICE_OPENVPN_CONF} <<EOF

# Uncomment this directive to allow different
# clients to be able to "see" each other.
# By default, clients will only see the server.
# To force clients to only see the server, you
# will also need to appropriately firewall the
# server's TUN/TAP interface.
${client_to_client}

# The keepalive directive causes ping-like
# messages to be sent back and forth over
# the link so that each side knows when
# the other side has gone down.
# Ping every 10 seconds, assume that remote
# peer is down if no ping received during
# a 120 second time period.
keepalive 10 120

# Enable compression on the VPN link.
# If you enable it here, you must also
# enable it in the client config file.
${compression}

# Enable PAM authentication plugin.
# If you enable it here, you must also
# enable it in the client config file.
${pam_authentication}

# It's a good idea to reduce the OpenVPN
# daemon's privileges after initialization.
#
# You can uncomment this out on
# non-Windows systems.
user nobody
group nogroup

# The persist options will try to avoid
# accessing certain resources on restart
# that may no longer be accessible because
# of the privilege downgrade.
persist-key
persist-tun

# Output a short status file showing
# current connections, truncated
# and rewritten every minute.
status openvpn-status.log

# By default, log messages will go to the syslog (or
# on Windows, if running as a service, they will go to
# the "\Program Files\OpenVPN\log" directory).
# Use log or log-append to override this default.
# "log" will truncate the log file on OpenVPN startup,
# while "log-append" will append to it.  Use one
# or the other (but not both).
log /var/log/openvpn.log

# Set the appropriate level of log
# file verbosity.
#
# 0 is silent, except for fatal errors
# 4 is reasonable for general usage
# 5 and 6 can help to debug connection problems
# 9 is extremely verbose
verb ${loglevel}

# Silence repeating messages.  At most 20
# sequential messages of the same message
# category will be output to the log.
mute 10

# Certificate Revocation List
crl-verify ${SERVICE_OPENVPN_KEY_DIR}/crl.pem

EOF

    xmlstarlet sel -t -m "${SERVICE_XPATH}" \
        -o "# Extra options" -n \
        -v "extra_options" -n \
        ${OMV_CONFIG_FILE} | xmlstarlet unesc >> ${SERVICE_OPENVPN_CONF}
}

add_client_cert()
{
    uuid=$1
    common_name="$(omv_config_get "${SERVICE_XPATH}/clients/client[uuid='${uuid}']/common_name")"

    # Change directory
    cd /etc/openvpn/easy-rsa/2.0/
    source ./vars

    # build-key for the client
    export KEY_DIR="${SERVICE_OPENVPN_KEY_DIR}"
    export KEY_CN="${common_name}"
    export EASY_RSA="${EASY_RSA:-.}"
    "$EASY_RSA/pkitool" ${uuid}
}

revoke_client_cert()
{
    uuid=$1

    # Change directory
    cd /etc/openvpn/easy-rsa/2.0/

    # Revoke
    . /etc/openvpn/easy-rsa/2.0/vars
    export KEY_DIR="${SERVICE_OPENVPN_KEY_DIR}"
    # revoke-full returns error 23 on success so just ignore errors
    . /etc/openvpn/easy-rsa/2.0/revoke-full ${uuid} || true
}


if [ "${1}" = "mkconf" ]; then
    args=(${2})
else
    args=(${*})
fi

# Generate configuration files
case ${args[0]} in
    setup)
        # Check if certificates exists
        if [ ! -f ${SERVICE_OPENVPN_KEY_DIR}/ca.key -o ! -f ${SERVICE_OPENVPN_KEY_DIR}/server.key ]; then
            setup_certificates
        fi

        setup_config
    ;;

    setup_certificates)
        setup_certificates
    ;;

    add)
        test -n "${args[1]}" && add_client_cert ${args[1]}
    ;;

    revoke)
        test -n "${args[1]}" && revoke_client_cert ${args[1]}
    ;;
esac

exit 0
